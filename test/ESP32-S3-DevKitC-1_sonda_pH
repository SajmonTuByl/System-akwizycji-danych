// Kod dla mikrokontrolera opartego na ESP32-S3 (ESP32-S3-DevKitC-1) z podłączoną sondą pH

#include <Arduino.h>
#include <WiFi.h>
#include <WiFiMulti.h>
#include <WiFiClientSecure.h>
#include <WebSocketsClient.h>
#include <ArduinoJson.h>
#include <math.h>

//#define RGB_BUILTIN
#define RGB_BRIGHTNESS 3

static void SendDataToDas();
static void hexdump(const void *mem, uint32_t len, uint8_t cols);
static void webSocketEvent(WStype_t type, uint8_t * payload, size_t length);
static float voltageToPh(float voltage, float temp);

WiFiMulti wiFiMulti;
WebSocketsClient webSocket;
//-----------------------------------------------------------
// Data Acquisition Server credentials
IPAddress serverIP(192, 168, 1, 101);
#define portNumber 11000
//-----------------------------------------------------------
// Device parameters definition
int deviceId = 1;
String deviceName = "Board_No1";
String deviceIpAddress;
String deviceStatus = "Ok";
int deviceUpdateInterval = 3000; //miliseconds
int deviceBatteryLevel = 101;
//-----------------------------------------------------------
// Sensors arrays definition
int sensorId[4] = {1,2,3,4};
String sensorName[4] = {};
String sensorStatus[4] = {};
String sensorType[4] = {};
float sensorValue[4] = {};
String sensorUnit[4] = {};
//-----------------------------------------------------------
const int capacity = 6*JSON_OBJECT_SIZE(1) + 6*JSON_ARRAY_SIZE(4) + 6*4*JSON_OBJECT_SIZE(1);  //6 objects + 6 tables with 4 element + 6*4 1-element objects in arrays
StaticJsonDocument<capacity> doc;
//DynamicJsonDocument doc(capacity);
//-----------------------------------------------------------
void setup(){
  Serial.begin(9600);
  Serial.setDebugOutput(true);
  //-----------------------------------------------------------
  // Sieć WiFi
  wiFiMulti.addAP("TestNetwork", "TestNetwork");

  // WiFi.disconnect();
  while(wiFiMulti.run() != WL_CONNECTED) {
    neopixelWrite(RGB_BUILTIN,RGB_BRIGHTNESS,0,0); // Red
		delay(200);
    digitalWrite(RGB_BUILTIN, LOW);    // Wyłącz RGB LED
    Serial.print(".");
	}
  Serial.flush();

  Serial.println(WiFi.SSID());
  Serial.println(WiFi.localIP());
  deviceIpAddress = WiFi.localIP().toString();
  //-----------------------------------------------------------
  // Ustawienia WebSocket
	webSocket.begin(serverIP, portNumber, "/");
	webSocket.onEvent(webSocketEvent);
	// Podstawowa autoryzacja HTTP, niewymagane
	webSocket.setAuthorization("user", "Password");
	webSocket.setReconnectInterval(5000);
  //-----------------------------------------------------------
  sensorName[0] = "Sonda pH 1";
  sensorStatus[0] = "1";
  sensorType[0] = "pH";
  sensorValue[0] = 0;
  sensorUnit[0] = "pH";
  sensorName[1] = "Sonda pH 1";
  sensorStatus[1] = "1";
  sensorType[1] = "pH";
  sensorValue[1] = 0;
  sensorUnit[1] = "mV";

  sensorName[2] = "";   //Sonda pH 2"
  sensorStatus[2] = "";
  sensorType[2] = "pH";
  sensorValue[2] = 0;
  sensorUnit[2] = "pH";
  sensorName[3] = "";   //Sonda pH 2"
  sensorStatus[3] = "";
  sensorType[3] = "pH";
  sensorValue[3] = 0;
  sensorUnit[3] = "mV";
}

void loop(){
  webSocket.loop();

  int sensorValue1 = analogRead(1);
  int sensorValue2 = analogRead(2);

  float zero1 = 2500;
  float zero2 = 2500;

  float voltage1 = (roundf(sensorValue1 * (3.3 / 4095.0) * 1000 * 100)/100)-zero1;
  float voltage2 = (roundf(sensorValue2 * (3.3 / 4095.0) * 1000 * 100)/100)-zero2;

  float pH1 = voltageToPh(voltage1, 298);
  float pH2 = voltageToPh(voltage2, 298);

  sensorValue[0] = pH1;
  sensorValue[1] = voltage1;
  sensorValue[2] = pH2;
  sensorValue[3] = voltage2;

  Serial.print(voltage1);
  Serial.print(" mV");
  Serial.print("    ");
  Serial.print(voltage2);
  Serial.print(" mV");
  Serial.print("    ");
  Serial.print("pH ");
  Serial.print(pH1);
  Serial.print("    ");
  Serial.print("pH ");
  Serial.println(pH2);

  // Check time interval
  uint32_t currentMillis = millis();
  static uint32_t lastMillis;
  const uint32_t interval = deviceUpdateInterval;
    
  // Sends the Json string to the DAS once every 'interval'
  if (currentMillis - lastMillis >= interval) {
      lastMillis += interval;
      SendDataToDas();
  }
}

void SendDataToDas() {
  // Add values to the document to serialize
  // Device info
  doc["deviceId"] = deviceId;
  doc["deviceName"] = deviceName;
  doc["deviceIpAddress"] = deviceIpAddress;
  doc["deviceStatus"] = deviceStatus;
  doc["deviceUpdateInterval"] = deviceUpdateInterval;
  doc["deviceBatteryLevel"] = deviceBatteryLevel;

  // Arrays for sensors
  JsonArray sensorId_Json = doc.createNestedArray("sensorId");
  JsonArray sensorName_Json = doc.createNestedArray("sensorName");
  JsonArray sensorStatus_Json = doc.createNestedArray("sensorStatus");
  JsonArray sensorType_Json = doc.createNestedArray("sensorType");
  JsonArray sensorValue_Json = doc.createNestedArray("sensorValue");
  JsonArray sensorUnit_Json = doc.createNestedArray("sensorUnit");

  // Loading each Json array with values from our arrays
  for (int id : sensorId){
    sensorId_Json.add(id);
  }
  for (String name : sensorName){
    sensorName_Json.add(name);
  }
  for (String status : sensorStatus){
    sensorStatus_Json.add(status);
  }
  for (String type : sensorType){
    sensorType_Json.add(type);
  }
  for (float value : sensorValue){
    sensorValue_Json.add(value);
  }
  for (String unit : sensorUnit){
    sensorUnit_Json.add(unit);
  }

  String data;
  serializeJson(doc, data);
  webSocket.sendTXT(data);

  doc.clear();
}

void hexdump(const void *mem, uint32_t len, uint8_t cols = 16) {
	const uint8_t* src = (const uint8_t*) mem;
	Serial.printf("\n[HEXDUMP] Address: 0x%08X len: 0x%X (%d)", (ptrdiff_t)src, len, len);
	for(uint32_t i = 0; i < len; i++) {
		if(i % cols == 0) {
			Serial.printf("\n[0x%08X] 0x%08X: ", (ptrdiff_t)src, i);
		}
		Serial.printf("%02X ", *src);
		src++;
	}
	Serial.printf("\n");
}

void webSocketEvent(WStype_t type, uint8_t * payload, size_t length) {
	switch(type) {
		case WStype_DISCONNECTED:
			Serial.printf("[WSc] Disconnected!\n");

      //neopixelWrite(RGB_BUILTIN,0,0,0);
      neopixelWrite(RGB_BUILTIN,0,0,RGB_BRIGHTNESS); // Blue
      delay(100);
      neopixelWrite(RGB_BUILTIN,0,0,0);

			break;
		case WStype_CONNECTED:
      neopixelWrite(RGB_BUILTIN,0,RGB_BRIGHTNESS,0); // Green
      Serial.printf("[WSc] Connected to url: %s:%s%s\n", serverIP.toString(), (String)portNumber, payload);
			break;

		case WStype_TEXT:
			Serial.printf("[WSc] get text: %s\n", payload);
			break;

		case WStype_BIN:
			Serial.printf("[WSc] get binary length: %u\n", length);
			hexdump(payload, length);
			break;

		case WStype_ERROR:			
		case WStype_FRAGMENT_TEXT_START:
		case WStype_FRAGMENT_BIN_START:
		case WStype_FRAGMENT:
		case WStype_FRAGMENT_FIN:
			break;
	}
}

float voltageToPh(float voltage, float temp){
  float pH = 7.0;
  float slope = ((2.303*8.3145*temp)/96485.0)*1000; // mV/pH
  if(voltage>0) pH = pH - abs(voltage)/slope;
  if(voltage<0) pH = pH + abs(voltage)/slope;

  return pH;
}